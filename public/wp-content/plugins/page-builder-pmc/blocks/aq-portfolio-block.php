<?phpif(!class_exists('AQ_Portfolio_Block')) {	class AQ_Portfolio_Block extends AQ_Block {				//set and create block		function __construct() {			$block_options = array(				'name' => 'Sort Portfolio',
				'size' => 'span12',				'icon' => 'fa-th-large',				'icon_color' => 'FFF',				'category' => 'Content',				'help' => 'This is the block that adds sort portfolio block. This is the block where you can sort the portfolio items by category.',				'resizable' => 0			);						//create the block			parent::__construct('aq_portfolio_block', $block_options);		}				function form($instance) {						$defaults = array(				'filter' => 1,				'categories_port'	=> null,				'numberofpost'	=> 12,				'id' => 'porfolio_block',				'port_ajax' => 'false',					'categories_port_selected' => '',				'style' => 'default',				'circle' => 0,			);			$instance = wp_parse_args($instance, $defaults);			extract($instance);									$port_categories_default = ($temp = get_terms('portfoliocategory')) ? $temp : array();			$categories_options_default = array();			$i = 0;			foreach($port_categories_default as $cat_default) {				$categories_options_default[$i++] = $cat_default->term_id;			}					If(empty($categories_port)){					$categories_port = $categories_options_default;			}						$isinarray = true;			foreach($categories_port as $cat_saved){								if(array_search($cat_saved,$categories_options_default) === false){						$isinarray = false;					}				if($isinarray == false){					$categories_port = null;					break; 				}							}			if(empty($categories_port)){				$categories_port = $categories_options_default;			}									$port_categories = ($temp = get_terms('portfoliocategory')) ? $temp : array();			$categories_options = array();			foreach($port_categories as $cat) {				$categories_options[$cat->term_id] = $cat->name;			}								$port_categories = ($temp = get_terms('portfoliocategory')) ? $temp : array();			$categories_options_selected = array();			$categories_options_selected[-1] = 'None';			foreach($port_categories as $cat) {				$categories_options_selected[$cat->term_id] = $cat->name;			}									$ajax_options = array(				'true' => 'True',				'false' => 'False',			);						$style_options = array(				'default' => 'Default style',				'fullwidth' => 'Fullwidth style',				'circle' => 'Circle style',			);													if( function_exists( 'pmc_portfolio' ) ){									?>				<p>Note: You should only use this block on a full-width template</p>				<p class="description half">					<label for="<?php echo $this->get_field_id('categories_port') ?>">					Portfolio Categories<br/>					<?php echo aq_field_multiselect('categories_port', $block_id, $categories_options, $categories_port); ?>					</label>				</p>				<p class="description half last">					<label for="<?php echo $this->get_field_id('categories_port_selected') ?>">					Select active category on load<br/>					<?php echo aq_field_select('categories_port_selected', $block_id, $categories_options_selected, $categories_port_selected); ?>					</label>				</p>							<p class="description half">					<label for="<?php echo $this->get_field_id('filter') ?>">						<?php echo aq_field_checkbox('filter', $block_id, $filter); ?>						Show filter?					</label>				</p>				<p class="description half last">					<label for="<?php echo $this->get_field_id('numberofpost') ?>">						Number of portfolio to show<br/>					<?php echo aq_field_input('numberofpost', $block_id, $numberofpost) ?>					</label>				</p>							<p class="description half ">					<label for="<?php echo $this->get_field_id('id') ?>">						Id for menu						<?php echo aq_field_input('id', $block_id, $id, $size = 'full') ?>					</label>				</p>							<p class="description half last">					<label for="<?php echo $this->get_field_id('port_ajax') ?>">						Use ajax<br/>						<?php echo aq_field_select('port_ajax', $block_id, $ajax_options, $port_ajax); ?>					</label>				</p>				<p class="description half">					<label for="<?php echo $this->get_field_id('style') ?>">						Style of portfolio<br/>						<?php echo aq_field_select('style', $block_id, $style_options, $style); ?>					</label>				</p>							<?php			}			else {				echo '<p class="description note">For this block you need to use PremiumCoding themes!</p>';			}					}				function block($instance) {					$defaults = array(				'filter' => 1,				'categories_port'	=> null,				'numberofpost'	=> 12,				'id' => 'porfolio_block',				'port_ajax' => 'false',					'categories_port_selected' => '',				'style' => 'default',			);			$instance = wp_parse_args($instance, $defaults);			extract($instance);									$port_categories_default = ($temp = get_terms('portfoliocategory')) ? $temp : array();			$categories_options_default = array();			$i = 0;			foreach($port_categories_default as $cat_default) {				$categories_options_default[$i++] = $cat_default->term_id;			}							If(empty($categories_port)){					$categories_port = $categories_options_default;			}						$isinarray = true;			foreach($categories_port as $cat_saved){								if(array_search($cat_saved,$categories_options_default) === false){						$isinarray = false;					}				if($isinarray == false){					$categories_port = null;					break; 				}							}			if(empty($categories_port)){				$categories_port = $categories_options_default;			}												if($filter && count($categories_port) > 1){ ?>								<div id="<?php if(isset($id)){ echo $id; }?>">					<div id="remove" class="portfolioremove" data-option-key="filter">						<h2>						<a class="catlink" href="#filter" data-option-value="*"><?php _e('Show All','pmc-themes'); ?> <span> </span></a>						<?php						foreach ($categories_port as $category) {						$find =     array("&", "/", " ","amp;","&#38;");						$replace  = array("", "", "", "","");						$entrycategory = str_replace($find , $replace, pmc_getcatname($category,'portfoliocategory'));							echo '<a class="catlink" href="#filter" data-option-value=".'.$entrycategory .'" >'.pmc_getcatname($category,'portfoliocategory').' <span class="aftersortingword"> </span></a>';						}						?>						</h2>					</div>				</div>			<?php } ?>										<?php pmc_portfolio(4,3,'port',$numberofpost,$categories_port,$port_ajax, $style,0,0,'homePort'); ?>									<?php wp_reset_query(); ?>						  <script>    jQuery(function(){            var $container = jQuery('#portitems4');      $container.isotope({        itemSelector : '.item3'		<?php if (isset($categories_port_selected) and $categories_port_selected != -1 ){			  $cat = pmc_getcatname($categories_port_selected,'portfoliocategory'); ?>		,filter : '.<?php echo $cat ?>'		<?php } ?>      });                  var $optionSets = jQuery('#remove'),          $optionLinks = $optionSets.find('a');      $optionLinks.click(function(){        var $this = jQuery(this);        // don't proceed if already selected        if ( $this.hasClass('selected') ) {          return false;        }        var $optionSet = $this.parents('#remove');        $optionSet.find('.selected').removeClass('selected');        $this.addClass('selected');          // make option object dynamically, i.e. { filter: '.my-filter-class' }        var options = {},            key = $optionSet.attr('data-option-key'),            value = $this.attr('data-option-value');        // parse 'false' as false boolean        value = value === 'false' ? false : value;        options[ key ] = value;        if ( key === 'layoutMode' && typeof changeLayoutMode === 'function' ) {          // changes in layout modes need extra logic          changeLayoutMode( $this, options )        } else {          // otherwise, apply new options          $container.isotope( options );        }                return false;      });    jQuery(window).on('load', function(){        var height = jQuery('.isotope-item img').height();		var width = jQuery('.isotope-item img').width();		var iframe_height = jQuery('.homePort .image iframe').attr('height');		if (jQuery(".isotope-item img").length == 0){			jQuery('.isotope-item ').css('height',iframe_height);			jQuery('.isotope-item .recentimage').addClass('img');		}				if (jQuery(".isotope-item img").length > 0){			jQuery('.isotope-item, .homePort .recentimage ').css('height',height);					jQuery('.homePort .image iframe').attr('height',height);			jQuery('.homePort .image iframe').attr('width',width);		}		$container.isotope('reLayout');    });
      	jQuery( window ).resize(function() {        var height = jQuery('.isotope-item img').height();		var width = jQuery('.isotope-item img').width();		jQuery('.isotope-item ').css('height',height);		var iframe_height = jQuery('.homePort .image iframe').attr('height');		if (jQuery(".isotope-item img").length == 0){			jQuery('.isotope-item .recentimage').addClass('img');			jQuery('.isotope-item ').css('height',iframe_height);		}					if (jQuery(".isotope-item img").length > 0){			jQuery('.isotope-item, .homePort .recentimage ').css('height',height);			jQuery('.homePort .image iframe').attr('height',height);			jQuery('.homePort .image iframe').attr('width',width);			}		$container.isotope('reLayout');	});	      });  </script><?php					}				function update($new_instance, $old_instance) {			return $new_instance;		}			}}